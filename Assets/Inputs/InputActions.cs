//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Inputs/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""85eb980a-c4b3-4c61-9482-3cee266d9e95"",
            ""actions"": [
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""428c3970-26a8-4533-9666-32d1988feb54"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Walk"",
                    ""type"": ""Button"",
                    ""id"": ""af8347bf-99dd-4694-a4ae-956e1568f607"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interactions"",
                    ""type"": ""Button"",
                    ""id"": ""b25e7dd4-f33b-48db-8d9a-788f429e79ae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldInteraction"",
                    ""type"": ""Button"",
                    ""id"": ""136cff3f-0f83-4bad-b7bb-bc78fc0d2679"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(pressPoint=1)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""3cccda90-7dcf-4f5b-b5b7-74751fd069b3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1e6d024c-94f5-4add-b380-c8148cef3cef"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a731bdec-3f4f-44a1-8ef5-80e5206a63fd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""83302c20-8817-4860-9373-d8edceca8a36"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""eafaae50-bb62-463f-af26-eba04d151e21"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""90f7de34-2439-4624-9dd1-f47aa4daa448"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""21fec66c-b83b-4c5b-883c-282781f43462"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interactions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ddb0c3b2-6e43-485c-9e79-441fab9aae4c"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldInteraction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Drone"",
            ""id"": ""c37d6e37-47b1-4609-a499-ddbc6b944998"",
            ""actions"": [
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""5c864a31-5055-4b2c-b03f-09ce32fff443"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UpDown"",
                    ""type"": ""Button"",
                    ""id"": ""8d3c5aba-7232-4257-b2f8-6524a22f1da5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ForwardBack"",
                    ""type"": ""Button"",
                    ""id"": ""4d71b4b9-d054-4c78-96af-2cb881abd314"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""1a9483f3-8e5f-42a8-aab7-c00e3ca233cd"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""dae71972-d98b-49d1-b463-e84a451306f7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""cf49036e-8f3b-4a2b-b172-c48a102de79f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a81e514c-92e6-4e1a-b142-36f3364f2da0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""27d89b12-9ed0-4656-9f58-bb86daa729aa"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""36a19a33-aa51-41eb-b217-d2d0861bcd3f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""79b5e802-0648-40ab-a149-e5b280e24f6f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardBack"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5fe2e2fc-8fc1-40d2-b0ad-1a69fc63cb3d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""dcee49aa-02aa-40de-b1e9-2bab04d6cc07"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""ForkLift"",
            ""id"": ""35d18060-af29-4b13-8067-45311e3cef66"",
            ""actions"": [
                {
                    ""name"": ""Drive"",
                    ""type"": ""Button"",
                    ""id"": ""6b240f88-b6e1-4805-9a3b-7bb1012062a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""e99c5c97-5729-494f-9337-a1a6d54a2fa4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lift"",
                    ""type"": ""Button"",
                    ""id"": ""e2c82086-db24-4cd1-a135-ae917b66e3d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lower"",
                    ""type"": ""Button"",
                    ""id"": ""4736fa62-6bd0-4161-bf69-c89c31e77d08"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""85017a3c-d057-4263-a7ec-6203458e20c5"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b28d0bae-1d00-460a-a3c1-c19bd313519a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7229edac-741f-4bee-89c2-4a125312039e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""e504e98d-7965-46a0-8aaa-81f56db4a0d7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""f0a4e23a-9d93-4d9c-bf96-b204f24bf3f1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d5f59529-593f-4f16-a30d-0803521aefb5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c5fa1d87-0183-46c5-8559-913a5c6a08a5"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""858ff4e8-81a6-444c-9121-589382bb04a7"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DestructibleCrate"",
            ""id"": ""3f77b701-ef88-43cc-9e45-5e8844111610"",
            ""actions"": [
                {
                    ""name"": ""Break"",
                    ""type"": ""Button"",
                    ""id"": ""42f46d73-5ece-43ae-a82a-4cff822e95a8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f1a6ef14-ccb7-471f-b1ab-3921d7eba6ae"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Break"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Rotate = m_Player.FindAction("Rotate", throwIfNotFound: true);
        m_Player_Walk = m_Player.FindAction("Walk", throwIfNotFound: true);
        m_Player_Interactions = m_Player.FindAction("Interactions", throwIfNotFound: true);
        m_Player_HoldInteraction = m_Player.FindAction("HoldInteraction", throwIfNotFound: true);
        // Drone
        m_Drone = asset.FindActionMap("Drone", throwIfNotFound: true);
        m_Drone_Rotate = m_Drone.FindAction("Rotate", throwIfNotFound: true);
        m_Drone_UpDown = m_Drone.FindAction("UpDown", throwIfNotFound: true);
        m_Drone_ForwardBack = m_Drone.FindAction("ForwardBack", throwIfNotFound: true);
        // ForkLift
        m_ForkLift = asset.FindActionMap("ForkLift", throwIfNotFound: true);
        m_ForkLift_Drive = m_ForkLift.FindAction("Drive", throwIfNotFound: true);
        m_ForkLift_Rotate = m_ForkLift.FindAction("Rotate", throwIfNotFound: true);
        m_ForkLift_Lift = m_ForkLift.FindAction("Lift", throwIfNotFound: true);
        m_ForkLift_Lower = m_ForkLift.FindAction("Lower", throwIfNotFound: true);
        // DestructibleCrate
        m_DestructibleCrate = asset.FindActionMap("DestructibleCrate", throwIfNotFound: true);
        m_DestructibleCrate_Break = m_DestructibleCrate.FindAction("Break", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Rotate;
    private readonly InputAction m_Player_Walk;
    private readonly InputAction m_Player_Interactions;
    private readonly InputAction m_Player_HoldInteraction;
    public struct PlayerActions
    {
        private @InputActions m_Wrapper;
        public PlayerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotate => m_Wrapper.m_Player_Rotate;
        public InputAction @Walk => m_Wrapper.m_Player_Walk;
        public InputAction @Interactions => m_Wrapper.m_Player_Interactions;
        public InputAction @HoldInteraction => m_Wrapper.m_Player_HoldInteraction;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Rotate.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotate;
                @Walk.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWalk;
                @Walk.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWalk;
                @Walk.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWalk;
                @Interactions.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteractions;
                @Interactions.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteractions;
                @Interactions.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteractions;
                @HoldInteraction.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHoldInteraction;
                @HoldInteraction.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHoldInteraction;
                @HoldInteraction.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHoldInteraction;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @Walk.started += instance.OnWalk;
                @Walk.performed += instance.OnWalk;
                @Walk.canceled += instance.OnWalk;
                @Interactions.started += instance.OnInteractions;
                @Interactions.performed += instance.OnInteractions;
                @Interactions.canceled += instance.OnInteractions;
                @HoldInteraction.started += instance.OnHoldInteraction;
                @HoldInteraction.performed += instance.OnHoldInteraction;
                @HoldInteraction.canceled += instance.OnHoldInteraction;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Drone
    private readonly InputActionMap m_Drone;
    private IDroneActions m_DroneActionsCallbackInterface;
    private readonly InputAction m_Drone_Rotate;
    private readonly InputAction m_Drone_UpDown;
    private readonly InputAction m_Drone_ForwardBack;
    public struct DroneActions
    {
        private @InputActions m_Wrapper;
        public DroneActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotate => m_Wrapper.m_Drone_Rotate;
        public InputAction @UpDown => m_Wrapper.m_Drone_UpDown;
        public InputAction @ForwardBack => m_Wrapper.m_Drone_ForwardBack;
        public InputActionMap Get() { return m_Wrapper.m_Drone; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DroneActions set) { return set.Get(); }
        public void SetCallbacks(IDroneActions instance)
        {
            if (m_Wrapper.m_DroneActionsCallbackInterface != null)
            {
                @Rotate.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnRotate;
                @UpDown.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnUpDown;
                @UpDown.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnUpDown;
                @UpDown.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnUpDown;
                @ForwardBack.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnForwardBack;
                @ForwardBack.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnForwardBack;
                @ForwardBack.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnForwardBack;
            }
            m_Wrapper.m_DroneActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @UpDown.started += instance.OnUpDown;
                @UpDown.performed += instance.OnUpDown;
                @UpDown.canceled += instance.OnUpDown;
                @ForwardBack.started += instance.OnForwardBack;
                @ForwardBack.performed += instance.OnForwardBack;
                @ForwardBack.canceled += instance.OnForwardBack;
            }
        }
    }
    public DroneActions @Drone => new DroneActions(this);

    // ForkLift
    private readonly InputActionMap m_ForkLift;
    private IForkLiftActions m_ForkLiftActionsCallbackInterface;
    private readonly InputAction m_ForkLift_Drive;
    private readonly InputAction m_ForkLift_Rotate;
    private readonly InputAction m_ForkLift_Lift;
    private readonly InputAction m_ForkLift_Lower;
    public struct ForkLiftActions
    {
        private @InputActions m_Wrapper;
        public ForkLiftActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Drive => m_Wrapper.m_ForkLift_Drive;
        public InputAction @Rotate => m_Wrapper.m_ForkLift_Rotate;
        public InputAction @Lift => m_Wrapper.m_ForkLift_Lift;
        public InputAction @Lower => m_Wrapper.m_ForkLift_Lower;
        public InputActionMap Get() { return m_Wrapper.m_ForkLift; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ForkLiftActions set) { return set.Get(); }
        public void SetCallbacks(IForkLiftActions instance)
        {
            if (m_Wrapper.m_ForkLiftActionsCallbackInterface != null)
            {
                @Drive.started -= m_Wrapper.m_ForkLiftActionsCallbackInterface.OnDrive;
                @Drive.performed -= m_Wrapper.m_ForkLiftActionsCallbackInterface.OnDrive;
                @Drive.canceled -= m_Wrapper.m_ForkLiftActionsCallbackInterface.OnDrive;
                @Rotate.started -= m_Wrapper.m_ForkLiftActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_ForkLiftActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_ForkLiftActionsCallbackInterface.OnRotate;
                @Lift.started -= m_Wrapper.m_ForkLiftActionsCallbackInterface.OnLift;
                @Lift.performed -= m_Wrapper.m_ForkLiftActionsCallbackInterface.OnLift;
                @Lift.canceled -= m_Wrapper.m_ForkLiftActionsCallbackInterface.OnLift;
                @Lower.started -= m_Wrapper.m_ForkLiftActionsCallbackInterface.OnLower;
                @Lower.performed -= m_Wrapper.m_ForkLiftActionsCallbackInterface.OnLower;
                @Lower.canceled -= m_Wrapper.m_ForkLiftActionsCallbackInterface.OnLower;
            }
            m_Wrapper.m_ForkLiftActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Drive.started += instance.OnDrive;
                @Drive.performed += instance.OnDrive;
                @Drive.canceled += instance.OnDrive;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @Lift.started += instance.OnLift;
                @Lift.performed += instance.OnLift;
                @Lift.canceled += instance.OnLift;
                @Lower.started += instance.OnLower;
                @Lower.performed += instance.OnLower;
                @Lower.canceled += instance.OnLower;
            }
        }
    }
    public ForkLiftActions @ForkLift => new ForkLiftActions(this);

    // DestructibleCrate
    private readonly InputActionMap m_DestructibleCrate;
    private IDestructibleCrateActions m_DestructibleCrateActionsCallbackInterface;
    private readonly InputAction m_DestructibleCrate_Break;
    public struct DestructibleCrateActions
    {
        private @InputActions m_Wrapper;
        public DestructibleCrateActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Break => m_Wrapper.m_DestructibleCrate_Break;
        public InputActionMap Get() { return m_Wrapper.m_DestructibleCrate; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DestructibleCrateActions set) { return set.Get(); }
        public void SetCallbacks(IDestructibleCrateActions instance)
        {
            if (m_Wrapper.m_DestructibleCrateActionsCallbackInterface != null)
            {
                @Break.started -= m_Wrapper.m_DestructibleCrateActionsCallbackInterface.OnBreak;
                @Break.performed -= m_Wrapper.m_DestructibleCrateActionsCallbackInterface.OnBreak;
                @Break.canceled -= m_Wrapper.m_DestructibleCrateActionsCallbackInterface.OnBreak;
            }
            m_Wrapper.m_DestructibleCrateActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Break.started += instance.OnBreak;
                @Break.performed += instance.OnBreak;
                @Break.canceled += instance.OnBreak;
            }
        }
    }
    public DestructibleCrateActions @DestructibleCrate => new DestructibleCrateActions(this);
    public interface IPlayerActions
    {
        void OnRotate(InputAction.CallbackContext context);
        void OnWalk(InputAction.CallbackContext context);
        void OnInteractions(InputAction.CallbackContext context);
        void OnHoldInteraction(InputAction.CallbackContext context);
    }
    public interface IDroneActions
    {
        void OnRotate(InputAction.CallbackContext context);
        void OnUpDown(InputAction.CallbackContext context);
        void OnForwardBack(InputAction.CallbackContext context);
    }
    public interface IForkLiftActions
    {
        void OnDrive(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnLift(InputAction.CallbackContext context);
        void OnLower(InputAction.CallbackContext context);
    }
    public interface IDestructibleCrateActions
    {
        void OnBreak(InputAction.CallbackContext context);
    }
}
